{"version":3,"sources":["../src/page.js"],"names":["wikiPage","byNamedImage","image","title","split","name","searchName","apiOptions","generator","gimlimit","prop","iiprop","titles","raw","then","res","query","Object","keys","pages","map","id","rvprop","rvsection","pageid","revisions","rawInfo","wikitext","parser","key","metadata","hasOwnProperty","rawPageInfo","html","rvlimit","rvparse","content","explaintext","extract","summary","exintro","images","rawImages","imageinfo","reduce","imageInfos","list","info","url","references","ellimit","extlinks","link","links","plnamespace","pllimit","limit","aggregated","_pagination","categories","category","coordinates","page","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","mainImageName","sort","text","indexOf","b","a","length","find"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api } from './util';\nimport infoboxParser from 'infobox-parser';\nimport {parseCoordinates} from './coordinates';\n\nconst byNamedImage = searchName => image => {\n\tconst [, name] = image.title.split(':');\n\treturn name === searchName;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'revisions',\n\t\t\t\trvprop: 'content',\n\t\t\t\trvlimit: 1,\n\t\t\t\trvparse: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * Text content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extracts',\n\t\t\t\texplaintext: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extracts',\n\t\t\t\texplaintext: '',\n\t\t\t\texintro: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\t\tgenerator: 'images',\n\t\t\t\tgimlimit: 'max',\n\t\t\t\tprop: 'imageinfo',\n\t\t\t\tiiprop: 'url',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tif (res.query) {\n\t\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()])\n\t\t\t.then(([images, info]) => {\n\t\t\t\t// Handle different translations of \"image\" here\n\t\t\t\tconst mainImageName = info.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine;\n\t\t\t\t// Handle case where no info box exists\n\t\t\t\tif (!mainImageName) {\n\t\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\t\tconst image = images[0];\n\t\t\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst image = images.find(byNamedImage(mainImageName));\n\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t: undefined;\n\t\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages()\n\t\t\t.then(images => {\n\t\t\t\treturn images\n\t\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t\t.map(info => info.url);\n\t\t\t});\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extlinks',\n\t\t\t\tellimit: 'max',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tprop: 'links',\n\t\t\tplnamespace: 0,\n\t\t\tpllimit: limit,\n\t\t\ttitles: raw.title\n\t\t}, res => res.query.pages[raw.pageid].links.map(link => link.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tprop: 'categories',\n\t\t\tpllimit: limit,\n\t\t\ttitles: raw.title\n\t\t}, res => res.query.pages[raw.pageid].categories.map(category => category.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'coordinates',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tconst page = res.query.pages[raw.pageid];\n\t\t\t\tif (page.coordinates) {\n\t\t\t\t\treturn page.coordinates[0];\n\t\t\t\t}\n\t\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t\t});\n\t}\n\t\n\tfunction rawInfo() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'revisions',\n\t\t\t\trvprop: 'content',\n\t\t\t\trvsection: 0,\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * Get information from page\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\treturn infoboxParser(wikitext, apiOptions.parser);\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tlist: 'backlinks',\n\t\t\tbllimit: limit,\n\t\t\tbltitle: raw.title\n\t\t}, res => res.query.backlinks.map(link => link.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\tconst page = {\n\t\traw,\n\t\thtml,\n\t\tcontent,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\trawInfo\n\t};\n\n\treturn page;\n}\n"]}